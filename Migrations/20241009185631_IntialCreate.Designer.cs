// <auto-generated />
using System;
using ChronosApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChronosApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241009185631_IntialCreate")]
    partial class IntialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChronosApi.Models.CandidaturaModel", b =>
                {
                    b.Property<int>("idCandidatura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCandidatura"));

                    b.Property<DateTime>("dataIncricao")
                        .HasColumnType("datetime2");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idVaga")
                        .HasColumnType("int");

                    b.HasKey("idCandidatura");

                    b.ToTable("TB_CANDIDATURA");

                    b.HasData(
                        new
                        {
                            idCandidatura = 1,
                            dataIncricao = new DateTime(2024, 10, 9, 15, 56, 31, 456, DateTimeKind.Local).AddTicks(3038),
                            idEgresso = 1,
                            idVaga = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.ComentarioModel", b =>
                {
                    b.Property<int>("idComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idComentario"));

                    b.Property<string>("comentarioPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idPublicacao")
                        .HasColumnType("int");

                    b.HasKey("idComentario");

                    b.ToTable("TB_COMENTARIOS");

                    b.HasData(
                        new
                        {
                            idComentario = 1,
                            comentarioPublicacao = "Minha empresa esta contratando PCD para trabalharem",
                            idEgresso = 1,
                            idPublicacao = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.CorporacaoModel", b =>
                {
                    b.Property<int>("idCorporacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorporacao"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("cnpjCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricaoCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nomeCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numeroCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoCorporacao")
                        .HasColumnType("int");

                    b.HasKey("idCorporacao");

                    b.ToTable("TB_CORPORACAO");

                    b.HasData(
                        new
                        {
                            idCorporacao = 1,
                            DataAcesso = new DateTime(2024, 10, 9, 15, 56, 31, 456, DateTimeKind.Local).AddTicks(3020),
                            PasswordHash = new byte[] { 96, 61, 147, 96, 100, 80, 226, 131, 233, 99, 240, 18, 134, 150, 33, 45, 214, 191, 143, 141, 144, 180, 158, 141, 39, 248, 47, 31, 121, 95, 42, 160, 230, 37, 38, 104, 103, 21, 114, 110, 13, 94, 103, 240, 49, 169, 117, 14, 136, 177, 6, 96, 106, 221, 233, 230, 234, 187, 32, 48, 35, 121, 158, 130 },
                            PasswordSalt = new byte[] { 130, 104, 244, 124, 112, 44, 58, 255, 53, 172, 131, 132, 240, 201, 32, 47, 76, 86, 94, 247, 143, 112, 177, 36, 90, 122, 182, 22, 201, 55, 30, 81, 46, 126, 100, 42, 253, 4, 8, 150, 85, 209, 146, 153, 5, 65, 240, 86, 20, 9, 233, 14, 212, 175, 189, 16, 144, 78, 38, 246, 196, 79, 170, 100, 66, 20, 27, 200, 58, 128, 238, 21, 65, 57, 25, 114, 243, 8, 130, 241, 187, 206, 20, 252, 152, 0, 66, 140, 139, 246, 89, 159, 118, 231, 95, 70, 235, 65, 181, 162, 10, 78, 19, 162, 69, 151, 49, 141, 77, 205, 210, 3, 22, 56, 60, 94, 76, 211, 156, 246, 153, 219, 216, 216, 37, 194, 96, 69 },
                            cnpjCorporacao = "12.345.678/0001-99",
                            descricaoCorporacao = "Exemplo de corporação",
                            emailCorporacao = "contato@exemplo.com",
                            nomeCorporacao = "Corporação Exemplo",
                            numeroCorporacao = "12345678",
                            tipoCorporacao = 0
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.CursoModel", b =>
                {
                    b.Property<int>("idCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCurso"));

                    b.Property<string>("descricaoCurso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<int>("idCorporacaoEndereco")
                        .HasColumnType("int");

                    b.Property<string>("nomeCurso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCurso");

                    b.ToTable("TB_CURSO");

                    b.HasData(
                        new
                        {
                            idCurso = 1,
                            descricaoCurso = "Curso especializado no aprendizado de hardwares e códigos",
                            idCorporacao = 1,
                            idCorporacaoEndereco = 1,
                            nomeCurso = "Desenvolvimento de Sistemas"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.EgressoModel", b =>
                {
                    b.Property<int>("idEgresso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEgresso"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("cpfEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nomeEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numeroEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoEgresso")
                        .HasColumnType("int");

                    b.HasKey("idEgresso");

                    b.ToTable("TB_EGRESSO");

                    b.HasData(
                        new
                        {
                            idEgresso = 3,
                            DataAcesso = new DateTime(2024, 10, 9, 15, 56, 31, 456, DateTimeKind.Local).AddTicks(2870),
                            PasswordHash = new byte[] { 96, 61, 147, 96, 100, 80, 226, 131, 233, 99, 240, 18, 134, 150, 33, 45, 214, 191, 143, 141, 144, 180, 158, 141, 39, 248, 47, 31, 121, 95, 42, 160, 230, 37, 38, 104, 103, 21, 114, 110, 13, 94, 103, 240, 49, 169, 117, 14, 136, 177, 6, 96, 106, 221, 233, 230, 234, 187, 32, 48, 35, 121, 158, 130 },
                            PasswordSalt = new byte[] { 130, 104, 244, 124, 112, 44, 58, 255, 53, 172, 131, 132, 240, 201, 32, 47, 76, 86, 94, 247, 143, 112, 177, 36, 90, 122, 182, 22, 201, 55, 30, 81, 46, 126, 100, 42, 253, 4, 8, 150, 85, 209, 146, 153, 5, 65, 240, 86, 20, 9, 233, 14, 212, 175, 189, 16, 144, 78, 38, 246, 196, 79, 170, 100, 66, 20, 27, 200, 58, 128, 238, 21, 65, 57, 25, 114, 243, 8, 130, 241, 187, 206, 20, 252, 152, 0, 66, 140, 139, 246, 89, 159, 118, 231, 95, 70, 235, 65, 181, 162, 10, 78, 19, 162, 69, 151, 49, 141, 77, 205, 210, 3, 22, 56, 60, 94, 76, 211, 156, 246, 153, 219, 216, 216, 37, 194, 96, 69 },
                            cpfEgresso = "22222222222",
                            emailEgresso = "admin@example.com",
                            nomeEgresso = "Admin",
                            numeroEgresso = "40028922",
                            tipoEgresso = 0
                        },
                        new
                        {
                            idEgresso = 1,
                            DataAcesso = new DateTime(2024, 10, 9, 15, 56, 31, 456, DateTimeKind.Local).AddTicks(2998),
                            PasswordHash = new byte[] { 96, 61, 147, 96, 100, 80, 226, 131, 233, 99, 240, 18, 134, 150, 33, 45, 214, 191, 143, 141, 144, 180, 158, 141, 39, 248, 47, 31, 121, 95, 42, 160, 230, 37, 38, 104, 103, 21, 114, 110, 13, 94, 103, 240, 49, 169, 117, 14, 136, 177, 6, 96, 106, 221, 233, 230, 234, 187, 32, 48, 35, 121, 158, 130 },
                            PasswordSalt = new byte[] { 130, 104, 244, 124, 112, 44, 58, 255, 53, 172, 131, 132, 240, 201, 32, 47, 76, 86, 94, 247, 143, 112, 177, 36, 90, 122, 182, 22, 201, 55, 30, 81, 46, 126, 100, 42, 253, 4, 8, 150, 85, 209, 146, 153, 5, 65, 240, 86, 20, 9, 233, 14, 212, 175, 189, 16, 144, 78, 38, 246, 196, 79, 170, 100, 66, 20, 27, 200, 58, 128, 238, 21, 65, 57, 25, 114, 243, 8, 130, 241, 187, 206, 20, 252, 152, 0, 66, 140, 139, 246, 89, 159, 118, 231, 95, 70, 235, 65, 181, 162, 10, 78, 19, 162, 69, 151, 49, 141, 77, 205, 210, 3, 22, 56, 60, 94, 76, 211, 156, 246, 153, 219, 216, 216, 37, 194, 96, 69 },
                            cpfEgresso = "222",
                            emailEgresso = "ops.gmail",
                            nomeEgresso = "Pedro",
                            numeroEgresso = "8922",
                            tipoEgresso = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", b =>
                {
                    b.Property<int>("idCorporacaoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorporacaoEndereco"));

                    b.Property<string>("complementoCorporacaoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroCorporacaoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCorporacaoEndereco");

                    b.HasIndex("idCorporacao")
                        .IsUnique();

                    b.HasIndex("idLogradouro");

                    b.ToTable("TB_CORPORACAO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idCorporacaoEndereco = 1,
                            complementoCorporacaoEndereco = "bloco",
                            idCorporacao = 1,
                            idLogradouro = 1,
                            numeroCorporacaoEndereco = "443"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CursoEndereco", b =>
                {
                    b.Property<int>("idCursoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCursoEndereco"));

                    b.Property<string>("complementoCursoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroCursoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCursoEndereco");

                    b.ToTable("TB_CURSO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idCursoEndereco = 1,
                            complementoCursoEndereco = "",
                            idLogradouro = 2,
                            numeroCursoEndereco = "221"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.EgressoEnderecoModel", b =>
                {
                    b.Property<int>("idEgressoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEgressoEndereco"));

                    b.Property<string>("complementoEgressoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroEgressoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idEgressoEndereco");

                    b.HasIndex("idEgresso")
                        .IsUnique();

                    b.HasIndex("idLogradouro");

                    b.ToTable("TB_EGRESSO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idEgressoEndereco = 1,
                            complementoEgressoEndereco = "",
                            idEgresso = 1,
                            idLogradouro = 4,
                            numeroEgressoEndereco = "787"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.LogradouroModel", b =>
                {
                    b.Property<int>("idLogradouro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLogradouro"));

                    b.Property<string>("bairroLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cepLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cidadeLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("ufLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLogradouro");

                    b.ToTable("TB_LOGRADOURO");

                    b.HasData(
                        new
                        {
                            idLogradouro = 1,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "34"
                        },
                        new
                        {
                            idLogradouro = 2,
                            bairroLogradouro = "Vila Maria",
                            cepLogradouro = "33244232",
                            cidadeLogradouro = "Sao Paulo",
                            tipoLogradouro = 0,
                            ufLogradouro = "44"
                        },
                        new
                        {
                            idLogradouro = 3,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "34"
                        },
                        new
                        {
                            idLogradouro = 4,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "364"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.VagaEndereco", b =>
                {
                    b.Property<int>("idVagaEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVagaEndereco"));

                    b.Property<string>("complementoVagaEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroVagaEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVagaEndereco");

                    b.ToTable("TB_VAGA_ENDERECO");

                    b.HasData(
                        new
                        {
                            idVagaEndereco = 1,
                            complementoVagaEndereco = "",
                            idLogradouro = 3,
                            numeroVagaEndereco = "899"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.PublicacaoModel", b =>
                {
                    b.Property<int>("idPublicacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPublicacao"));

                    b.Property<int>("avaliacaoPublicacao")
                        .HasColumnType("int");

                    b.Property<string>("conteudoPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<string>("títuloPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPublicacao");

                    b.ToTable("TB_PUBLICACAO");

                    b.HasData(
                        new
                        {
                            idPublicacao = 1,
                            avaliacaoPublicacao = 1,
                            conteudoPublicacao = "Conteúdo top",
                            idCorporacao = 1,
                            títuloPublicacao = "Publicacao"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.VagaModel", b =>
                {
                    b.Property<int>("idVaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVaga"));

                    b.Property<string>("descricaoVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<int>("idVagaEndereco")
                        .HasColumnType("int");

                    b.Property<string>("nomeVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoVaga")
                        .HasColumnType("int");

                    b.HasKey("idVaga");

                    b.ToTable("TB_VAGA");

                    b.HasData(
                        new
                        {
                            idVaga = 1,
                            descricaoVaga = "Vaga júnior desenvolvedor",
                            idCorporacao = 1,
                            idVagaEndereco = 1,
                            nomeVaga = "Desenvolvedor Júnior",
                            tipoVaga = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.CorporacaoModel", "Corporacao")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", "idCorporacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "Logradouro")
                        .WithMany()
                        .HasForeignKey("idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporacao");

                    b.Navigation("Logradouro");
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.EgressoEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.EgressoModel", "Egresso")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.EgressoEnderecoModel", "idEgresso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "Logradouro")
                        .WithMany()
                        .HasForeignKey("idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Egresso");

                    b.Navigation("Logradouro");
                });
#pragma warning restore 612, 618
        }
    }
}
