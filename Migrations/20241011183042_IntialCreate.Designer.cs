// <auto-generated />
using System;
using ChronosApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChronosApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241011183042_IntialCreate")]
    partial class IntialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChronosApi.Models.CandidaturaModel", b =>
                {
                    b.Property<int>("idCandidatura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCandidatura"));

                    b.Property<DateTime>("dataIncricao")
                        .HasColumnType("datetime2");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idVaga")
                        .HasColumnType("int");

                    b.HasKey("idCandidatura");

                    b.ToTable("TB_CANDIDATURA");

                    b.HasData(
                        new
                        {
                            idCandidatura = 1,
                            dataIncricao = new DateTime(2024, 10, 11, 15, 30, 42, 163, DateTimeKind.Local).AddTicks(9332),
                            idEgresso = 1,
                            idVaga = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.ComentarioModel", b =>
                {
                    b.Property<int>("idComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idComentario"));

                    b.Property<string>("comentarioPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idPublicacao")
                        .HasColumnType("int");

                    b.HasKey("idComentario");

                    b.HasIndex("idEgresso");

                    b.HasIndex("idPublicacao");

                    b.ToTable("TB_COMENTARIOS");

                    b.HasData(
                        new
                        {
                            idComentario = 1,
                            comentarioPublicacao = "Minha empresa esta contratando auxiliares na cozinha para trabalharem",
                            idEgresso = 1,
                            idPublicacao = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.CorporacaoModel", b =>
                {
                    b.Property<int>("idCorporacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorporacao"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("cnpjCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricaoCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nomeCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numeroCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoCorporacao")
                        .HasColumnType("int");

                    b.HasKey("idCorporacao");

                    b.ToTable("TB_CORPORACAO");

                    b.HasData(
                        new
                        {
                            idCorporacao = 1,
                            DataAcesso = new DateTime(2024, 10, 11, 15, 30, 42, 163, DateTimeKind.Local).AddTicks(9316),
                            PasswordHash = new byte[] { 185, 38, 6, 80, 84, 170, 4, 211, 23, 130, 199, 99, 70, 17, 111, 226, 243, 193, 212, 248, 184, 20, 218, 25, 120, 79, 240, 54, 153, 135, 101, 40, 250, 170, 225, 203, 38, 247, 84, 8, 227, 196, 127, 229, 60, 231, 186, 98, 197, 33, 173, 44, 119, 231, 246, 151, 74, 78, 238, 248, 61, 163, 42, 125 },
                            PasswordSalt = new byte[] { 50, 14, 166, 125, 66, 71, 136, 170, 22, 63, 97, 232, 238, 169, 4, 2, 22, 212, 137, 168, 59, 102, 169, 164, 139, 175, 71, 210, 203, 29, 183, 248, 82, 59, 200, 32, 28, 66, 59, 66, 159, 122, 34, 236, 158, 153, 246, 131, 126, 121, 158, 89, 19, 214, 194, 224, 7, 243, 162, 216, 153, 230, 31, 117, 21, 110, 59, 214, 176, 254, 154, 44, 237, 52, 228, 31, 136, 148, 30, 0, 135, 135, 226, 60, 158, 2, 116, 101, 80, 252, 34, 238, 135, 7, 76, 156, 146, 69, 174, 12, 222, 170, 55, 25, 207, 129, 16, 27, 104, 45, 90, 213, 180, 98, 111, 30, 226, 55, 236, 132, 154, 105, 87, 17, 21, 238, 173, 188 },
                            cnpjCorporacao = "12.345.678/0001-99",
                            descricaoCorporacao = "Exemplo de corporação",
                            emailCorporacao = "contato@exemplo.com",
                            nomeCorporacao = "Corporação Exemplo",
                            numeroCorporacao = "12345678",
                            tipoCorporacao = 0
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.CursoModel", b =>
                {
                    b.Property<int>("idCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCurso"));

                    b.Property<string>("descricaoCurso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<int>("idCorporacaoEndereco")
                        .HasColumnType("int");

                    b.Property<string>("nomeCurso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCurso");

                    b.ToTable("TB_CURSO");

                    b.HasData(
                        new
                        {
                            idCurso = 1,
                            descricaoCurso = "Curso especializado no aprendizado de hardwares e códigos",
                            idCorporacao = 1,
                            idCorporacaoEndereco = 1,
                            nomeCurso = "Desenvolvimento de Sistemas"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.EgressoModel", b =>
                {
                    b.Property<int>("idEgresso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEgresso"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("cpfEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailEgresso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("nomeEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numeroEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoEgresso")
                        .HasColumnType("int");

                    b.HasKey("idEgresso");

                    b.ToTable("TB_EGRESSO");

                    b.HasData(
                        new
                        {
                            idEgresso = 3,
                            DataAcesso = new DateTime(2024, 10, 11, 15, 30, 42, 163, DateTimeKind.Local).AddTicks(9160),
                            PasswordHash = new byte[] { 185, 38, 6, 80, 84, 170, 4, 211, 23, 130, 199, 99, 70, 17, 111, 226, 243, 193, 212, 248, 184, 20, 218, 25, 120, 79, 240, 54, 153, 135, 101, 40, 250, 170, 225, 203, 38, 247, 84, 8, 227, 196, 127, 229, 60, 231, 186, 98, 197, 33, 173, 44, 119, 231, 246, 151, 74, 78, 238, 248, 61, 163, 42, 125 },
                            PasswordSalt = new byte[] { 50, 14, 166, 125, 66, 71, 136, 170, 22, 63, 97, 232, 238, 169, 4, 2, 22, 212, 137, 168, 59, 102, 169, 164, 139, 175, 71, 210, 203, 29, 183, 248, 82, 59, 200, 32, 28, 66, 59, 66, 159, 122, 34, 236, 158, 153, 246, 131, 126, 121, 158, 89, 19, 214, 194, 224, 7, 243, 162, 216, 153, 230, 31, 117, 21, 110, 59, 214, 176, 254, 154, 44, 237, 52, 228, 31, 136, 148, 30, 0, 135, 135, 226, 60, 158, 2, 116, 101, 80, 252, 34, 238, 135, 7, 76, 156, 146, 69, 174, 12, 222, 170, 55, 25, 207, 129, 16, 27, 104, 45, 90, 213, 180, 98, 111, 30, 226, 55, 236, 132, 154, 105, 87, 17, 21, 238, 173, 188 },
                            cpfEgresso = "22222222222",
                            emailEgresso = "admin@example.com",
                            nomeEgresso = "Admin",
                            numeroEgresso = "40028922",
                            tipoEgresso = 0
                        },
                        new
                        {
                            idEgresso = 1,
                            DataAcesso = new DateTime(2024, 10, 11, 15, 30, 42, 163, DateTimeKind.Local).AddTicks(9294),
                            PasswordHash = new byte[] { 185, 38, 6, 80, 84, 170, 4, 211, 23, 130, 199, 99, 70, 17, 111, 226, 243, 193, 212, 248, 184, 20, 218, 25, 120, 79, 240, 54, 153, 135, 101, 40, 250, 170, 225, 203, 38, 247, 84, 8, 227, 196, 127, 229, 60, 231, 186, 98, 197, 33, 173, 44, 119, 231, 246, 151, 74, 78, 238, 248, 61, 163, 42, 125 },
                            PasswordSalt = new byte[] { 50, 14, 166, 125, 66, 71, 136, 170, 22, 63, 97, 232, 238, 169, 4, 2, 22, 212, 137, 168, 59, 102, 169, 164, 139, 175, 71, 210, 203, 29, 183, 248, 82, 59, 200, 32, 28, 66, 59, 66, 159, 122, 34, 236, 158, 153, 246, 131, 126, 121, 158, 89, 19, 214, 194, 224, 7, 243, 162, 216, 153, 230, 31, 117, 21, 110, 59, 214, 176, 254, 154, 44, 237, 52, 228, 31, 136, 148, 30, 0, 135, 135, 226, 60, 158, 2, 116, 101, 80, 252, 34, 238, 135, 7, 76, 156, 146, 69, 174, 12, 222, 170, 55, 25, 207, 129, 16, 27, 104, 45, 90, 213, 180, 98, 111, 30, 226, 55, 236, 132, 154, 105, 87, 17, 21, 238, 173, 188 },
                            cpfEgresso = "222",
                            emailEgresso = "ops.gmail",
                            nomeEgresso = "Pedro",
                            numeroEgresso = "8922",
                            tipoEgresso = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", b =>
                {
                    b.Property<int>("idCorporacaoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorporacaoEndereco"));

                    b.Property<string>("complementoCorporacaoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroCorporacaoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCorporacaoEndereco");

                    b.HasIndex("idCorporacao")
                        .IsUnique();

                    b.HasIndex("idLogradouro")
                        .IsUnique();

                    b.ToTable("TB_CORPORACAO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idCorporacaoEndereco = 1,
                            complementoCorporacaoEndereco = "bloco",
                            idCorporacao = 1,
                            idLogradouro = 1,
                            numeroCorporacaoEndereco = "443"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CursoEnderecoModel", b =>
                {
                    b.Property<int>("idCursoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCursoEndereco"));

                    b.Property<string>("complementoCursoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCurso")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroCursoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCursoEndereco");

                    b.ToTable("TB_CURSO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idCursoEndereco = 1,
                            complementoCursoEndereco = "",
                            idCurso = 0,
                            idLogradouro = 2,
                            numeroCursoEndereco = "221"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.EgressoEnderecoModel", b =>
                {
                    b.Property<int>("idEgressoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEgressoEndereco"));

                    b.Property<string>("complementoEgressoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroEgressoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idEgressoEndereco");

                    b.HasIndex("idEgresso")
                        .IsUnique();

                    b.HasIndex("idLogradouro")
                        .IsUnique();

                    b.ToTable("TB_EGRESSO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idEgressoEndereco = 1,
                            complementoEgressoEndereco = "",
                            idEgresso = 1,
                            idLogradouro = 4,
                            numeroEgressoEndereco = "787"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.LogradouroModel", b =>
                {
                    b.Property<int>("idLogradouro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLogradouro"));

                    b.Property<string>("bairroLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cepLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cidadeLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("ufLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLogradouro");

                    b.ToTable("TB_LOGRADOURO");

                    b.HasData(
                        new
                        {
                            idLogradouro = 1,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "34"
                        },
                        new
                        {
                            idLogradouro = 2,
                            bairroLogradouro = "Vila Maria",
                            cepLogradouro = "33244232",
                            cidadeLogradouro = "Sao Paulo",
                            tipoLogradouro = 0,
                            ufLogradouro = "44"
                        },
                        new
                        {
                            idLogradouro = 3,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "34"
                        },
                        new
                        {
                            idLogradouro = 4,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "364"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.VagaEnderecoModel", b =>
                {
                    b.Property<int>("idVagaEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVagaEndereco"));

                    b.Property<string>("complementoVagaEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<int>("idVaga")
                        .HasColumnType("int");

                    b.Property<string>("numeroVagaEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVagaEndereco");

                    b.HasIndex("idLogradouro")
                        .IsUnique();

                    b.HasIndex("idVaga")
                        .IsUnique();

                    b.ToTable("TB_VAGA_ENDERECO");

                    b.HasData(
                        new
                        {
                            idVagaEndereco = 1,
                            complementoVagaEndereco = "",
                            idLogradouro = 3,
                            idVaga = 1,
                            numeroVagaEndereco = "899"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.PublicacaoModel", b =>
                {
                    b.Property<int>("idPublicacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPublicacao"));

                    b.Property<int>("avaliacaoPublicacao")
                        .HasColumnType("int");

                    b.Property<string>("conteudoPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<string>("títuloPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPublicacao");

                    b.ToTable("TB_PUBLICACAO");

                    b.HasData(
                        new
                        {
                            idPublicacao = 1,
                            avaliacaoPublicacao = 1,
                            conteudoPublicacao = "Conteúdo top",
                            idCorporacao = 1,
                            títuloPublicacao = "Publicacao"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.VagaModel", b =>
                {
                    b.Property<int>("idVaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVaga"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("descricaoVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<string>("nomeVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoVaga")
                        .HasColumnType("int");

                    b.HasKey("idVaga");

                    b.HasIndex("idCorporacao");

                    b.ToTable("TB_VAGA");

                    b.HasData(
                        new
                        {
                            idVaga = 1,
                            DataCriacao = new DateTime(2024, 10, 11, 18, 30, 42, 164, DateTimeKind.Utc).AddTicks(5200),
                            DataVencimento = new DateTime(2024, 11, 10, 18, 30, 42, 164, DateTimeKind.Utc).AddTicks(5201),
                            descricaoVaga = "Vaga júnior desenvolvedor",
                            idCorporacao = 1,
                            nomeVaga = "Desenvolvedor Júnior",
                            tipoVaga = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.ComentarioModel", b =>
                {
                    b.HasOne("ChronosApi.Models.EgressoModel", null)
                        .WithMany()
                        .HasForeignKey("idEgresso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.PublicacaoModel", null)
                        .WithMany()
                        .HasForeignKey("idPublicacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.CorporacaoModel", "corporacao")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", "idCorporacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "logradouro")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", "idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("corporacao");

                    b.Navigation("logradouro");
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.EgressoEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.EgressoModel", "Egresso")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.EgressoEnderecoModel", "idEgresso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "Logradouro")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.EgressoEnderecoModel", "idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Egresso");

                    b.Navigation("Logradouro");
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.VagaEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "logradouro")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.VagaEnderecoModel", "idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.VagaModel", "vaga")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.VagaEnderecoModel", "idVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("logradouro");

                    b.Navigation("vaga");
                });

            modelBuilder.Entity("ChronosApi.Models.VagaModel", b =>
                {
                    b.HasOne("ChronosApi.Models.CorporacaoModel", "Corporacao")
                        .WithMany("Vagas")
                        .HasForeignKey("idCorporacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporacao");
                });

            modelBuilder.Entity("ChronosApi.Models.CorporacaoModel", b =>
                {
                    b.Navigation("Vagas");
                });
#pragma warning restore 612, 618
        }
    }
}
