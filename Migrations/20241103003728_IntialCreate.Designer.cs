// <auto-generated />
using System;
using ChronosApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChronosApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241103003728_IntialCreate")]
    partial class IntialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChronosApi.Models.CandidaturaModel", b =>
                {
                    b.Property<int>("idCandidatura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCandidatura"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataIncricao")
                        .HasColumnType("datetime2");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idVaga")
                        .HasColumnType("int");

                    b.HasKey("idCandidatura");

                    b.HasIndex("idEgresso");

                    b.HasIndex("idVaga");

                    b.ToTable("TB_CANDIDATURA");

                    b.HasData(
                        new
                        {
                            idCandidatura = 1,
                            Status = 3,
                            dataIncricao = new DateTime(2024, 11, 2, 21, 37, 27, 735, DateTimeKind.Local).AddTicks(4646),
                            idEgresso = 1,
                            idVaga = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.ComentarioModel", b =>
                {
                    b.Property<int>("idComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idComentario"));

                    b.Property<int?>("PublicacaoModelidPublicacao")
                        .HasColumnType("int");

                    b.Property<string>("comentarioPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idPublicacao")
                        .HasColumnType("int");

                    b.HasKey("idComentario");

                    b.HasIndex("PublicacaoModelidPublicacao");

                    b.HasIndex("idEgresso");

                    b.HasIndex("idPublicacao");

                    b.ToTable("TB_COMENTARIOS");

                    b.HasData(
                        new
                        {
                            idComentario = 1,
                            comentarioPublicacao = "Minha empresa esta contratando auxiliares na cozinha para trabalharem",
                            idEgresso = 1,
                            idPublicacao = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.CorporacaoModel", b =>
                {
                    b.Property<int>("idCorporacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorporacao"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("cnpjCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricaoCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("fotoPerfilCorporacao")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("nomeCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numeroCorporacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoCorporacao")
                        .HasColumnType("int");

                    b.HasKey("idCorporacao");

                    b.ToTable("TB_CORPORACAO");

                    b.HasData(
                        new
                        {
                            idCorporacao = 1,
                            DataAcesso = new DateTime(2024, 11, 2, 21, 37, 27, 735, DateTimeKind.Local).AddTicks(4619),
                            PasswordHash = new byte[] { 78, 203, 5, 57, 207, 58, 158, 228, 39, 235, 60, 214, 50, 28, 169, 152, 154, 69, 86, 187, 2, 219, 0, 153, 132, 165, 108, 45, 186, 124, 248, 0, 17, 186, 225, 23, 175, 145, 150, 187, 226, 246, 242, 208, 175, 179, 21, 202, 213, 201, 81, 104, 192, 149, 178, 16, 243, 84, 42, 82, 140, 130, 56, 85 },
                            PasswordSalt = new byte[] { 109, 139, 137, 243, 84, 20, 239, 190, 105, 116, 96, 60, 173, 244, 71, 135, 149, 32, 6, 137, 191, 96, 87, 236, 116, 159, 222, 93, 208, 246, 37, 86, 106, 254, 156, 240, 134, 110, 94, 128, 34, 94, 1, 117, 251, 57, 117, 189, 99, 203, 98, 0, 165, 31, 192, 67, 208, 189, 189, 55, 102, 98, 117, 165, 60, 171, 155, 230, 128, 172, 134, 68, 224, 221, 160, 66, 104, 145, 150, 51, 50, 249, 250, 215, 39, 21, 159, 4, 210, 235, 178, 186, 200, 240, 61, 224, 9, 214, 130, 217, 99, 169, 200, 152, 74, 101, 39, 135, 235, 112, 33, 91, 150, 137, 119, 245, 119, 62, 44, 167, 185, 129, 168, 71, 19, 151, 119, 39 },
                            cnpjCorporacao = "12.345.678/0001-99",
                            descricaoCorporacao = "Exemplo de corporação",
                            emailCorporacao = "contato@exemplo.com",
                            nomeCorporacao = "Corporação Exemplo",
                            numeroCorporacao = "12345678",
                            tipoCorporacao = 0
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Curriculo.CurriculoModel", b =>
                {
                    b.Property<int>("idCurriculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCurriculo"));

                    b.Property<string>("descricaoCurriculo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailCurriculo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("habilidadesCurriculo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<string>("telefoneCurriculo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCurriculo");

                    b.HasIndex("idEgresso")
                        .IsUnique();

                    b.ToTable("TB_CURRICULO");

                    b.HasData(
                        new
                        {
                            idCurriculo = 1,
                            descricaoCurriculo = "Desenvolvedor de software com experiência em .NET.",
                            emailCurriculo = "curriculo1@example.com",
                            habilidadesCurriculo = "C#, ASP.NET Core, SQL Server",
                            idEgresso = 1,
                            telefoneCurriculo = "11999999999"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Curriculo.ExperienciaModel", b =>
                {
                    b.Property<int>("idExperiencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idExperiencia"));

                    b.Property<int?>("CurriculoidCurriculo")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cargoExperiencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dataFimExperiencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataInicioExperiencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("empresaExperiencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.HasKey("idExperiencia");

                    b.HasIndex("CurriculoidCurriculo");

                    b.HasIndex("idCurriculo");

                    b.ToTable("TB_EXPERIENCIA");

                    b.HasData(
                        new
                        {
                            idExperiencia = 1,
                            Descricao = "Desenvolvimento de aplicações web.",
                            cargoExperiencia = "Desenvolvedor Júnior",
                            dataFimExperiencia = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            dataInicioExperiencia = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            empresaExperiencia = "Empresa XYZ",
                            idCurriculo = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Curriculo.FormacaoModel", b =>
                {
                    b.Property<int>("idFormacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idFormacao"));

                    b.Property<int?>("CurriculoidCurriculo")
                        .HasColumnType("int");

                    b.Property<string>("cursoFormacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dataConclusaoFormacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCurriculo")
                        .HasColumnType("int");

                    b.Property<string>("instituicaoFormacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idFormacao");

                    b.HasIndex("CurriculoidCurriculo");

                    b.HasIndex("idCurriculo");

                    b.ToTable("TB_FORMACAO");

                    b.HasData(
                        new
                        {
                            idFormacao = 1,
                            cursoFormacao = "Análise e Desenvolvimento de Sistemas",
                            dataConclusaoFormacao = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idCurriculo = 1,
                            instituicaoFormacao = "Universidade ABC"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.CursoModel", b =>
                {
                    b.Property<int>("idCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCurso"));

                    b.Property<int>("cargaHorariaCurso")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataFimCurso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataInicioCurso")
                        .HasColumnType("datetime2");

                    b.Property<string>("descricaoCurso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<int?>("limiteVagas")
                        .HasColumnType("int");

                    b.Property<string>("nomeCurso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idCurso");

                    b.HasIndex("idCorporacao");

                    b.ToTable("TB_CURSO");

                    b.HasData(
                        new
                        {
                            idCurso = 1,
                            cargaHorariaCurso = 40,
                            dataFimCurso = new DateTime(2025, 2, 2, 21, 37, 27, 736, DateTimeKind.Local).AddTicks(9109),
                            dataInicioCurso = new DateTime(2024, 11, 2, 21, 37, 27, 736, DateTimeKind.Local).AddTicks(9104),
                            descricaoCurso = "Curso especializado no aprendizado de hardwares e códigos",
                            idCorporacao = 1,
                            nomeCurso = "Desenvolvimento de Sistemas"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.EgressoModel", b =>
                {
                    b.Property<int>("idEgresso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEgresso"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("cpfEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("fotoPerfilEgresso")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("nomeEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numeroEgresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoEgresso")
                        .HasColumnType("int");

                    b.HasKey("idEgresso");

                    b.ToTable("TB_EGRESSO");

                    b.HasData(
                        new
                        {
                            idEgresso = 3,
                            DataAcesso = new DateTime(2024, 11, 2, 21, 37, 27, 735, DateTimeKind.Local).AddTicks(4456),
                            PasswordHash = new byte[] { 78, 203, 5, 57, 207, 58, 158, 228, 39, 235, 60, 214, 50, 28, 169, 152, 154, 69, 86, 187, 2, 219, 0, 153, 132, 165, 108, 45, 186, 124, 248, 0, 17, 186, 225, 23, 175, 145, 150, 187, 226, 246, 242, 208, 175, 179, 21, 202, 213, 201, 81, 104, 192, 149, 178, 16, 243, 84, 42, 82, 140, 130, 56, 85 },
                            PasswordSalt = new byte[] { 109, 139, 137, 243, 84, 20, 239, 190, 105, 116, 96, 60, 173, 244, 71, 135, 149, 32, 6, 137, 191, 96, 87, 236, 116, 159, 222, 93, 208, 246, 37, 86, 106, 254, 156, 240, 134, 110, 94, 128, 34, 94, 1, 117, 251, 57, 117, 189, 99, 203, 98, 0, 165, 31, 192, 67, 208, 189, 189, 55, 102, 98, 117, 165, 60, 171, 155, 230, 128, 172, 134, 68, 224, 221, 160, 66, 104, 145, 150, 51, 50, 249, 250, 215, 39, 21, 159, 4, 210, 235, 178, 186, 200, 240, 61, 224, 9, 214, 130, 217, 99, 169, 200, 152, 74, 101, 39, 135, 235, 112, 33, 91, 150, 137, 119, 245, 119, 62, 44, 167, 185, 129, 168, 71, 19, 151, 119, 39 },
                            cpfEgresso = "22222222222",
                            emailEgresso = "admin@example.com",
                            nomeEgresso = "Admin",
                            numeroEgresso = "40028922",
                            tipoEgresso = 0
                        },
                        new
                        {
                            idEgresso = 1,
                            DataAcesso = new DateTime(2024, 11, 2, 21, 37, 27, 735, DateTimeKind.Local).AddTicks(4591),
                            PasswordHash = new byte[] { 78, 203, 5, 57, 207, 58, 158, 228, 39, 235, 60, 214, 50, 28, 169, 152, 154, 69, 86, 187, 2, 219, 0, 153, 132, 165, 108, 45, 186, 124, 248, 0, 17, 186, 225, 23, 175, 145, 150, 187, 226, 246, 242, 208, 175, 179, 21, 202, 213, 201, 81, 104, 192, 149, 178, 16, 243, 84, 42, 82, 140, 130, 56, 85 },
                            PasswordSalt = new byte[] { 109, 139, 137, 243, 84, 20, 239, 190, 105, 116, 96, 60, 173, 244, 71, 135, 149, 32, 6, 137, 191, 96, 87, 236, 116, 159, 222, 93, 208, 246, 37, 86, 106, 254, 156, 240, 134, 110, 94, 128, 34, 94, 1, 117, 251, 57, 117, 189, 99, 203, 98, 0, 165, 31, 192, 67, 208, 189, 189, 55, 102, 98, 117, 165, 60, 171, 155, 230, 128, 172, 134, 68, 224, 221, 160, 66, 104, 145, 150, 51, 50, 249, 250, 215, 39, 21, 159, 4, 210, 235, 178, 186, 200, 240, 61, 224, 9, 214, 130, 217, 99, 169, 200, 152, 74, 101, 39, 135, 235, 112, 33, 91, 150, 137, 119, 245, 119, 62, 44, 167, 185, 129, 168, 71, 19, 151, 119, 39 },
                            cpfEgresso = "222",
                            emailEgresso = "ops.gmail",
                            nomeEgresso = "Pedro",
                            numeroEgresso = "8922",
                            tipoEgresso = 1
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", b =>
                {
                    b.Property<int>("idCorporacaoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCorporacaoEndereco"));

                    b.Property<string>("complementoCorporacaoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroCorporacaoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCorporacaoEndereco");

                    b.HasIndex("idCorporacao")
                        .IsUnique();

                    b.HasIndex("idLogradouro")
                        .IsUnique();

                    b.ToTable("TB_CORPORACAO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idCorporacaoEndereco = 1,
                            complementoCorporacaoEndereco = "bloco",
                            idCorporacao = 1,
                            idLogradouro = 1,
                            numeroCorporacaoEndereco = "443"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CursoEnderecoModel", b =>
                {
                    b.Property<int>("idCursoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCursoEndereco"));

                    b.Property<string>("complementoCursoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCurso")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroCursoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCursoEndereco");

                    b.HasIndex("idCurso")
                        .IsUnique();

                    b.HasIndex("idLogradouro")
                        .IsUnique();

                    b.ToTable("TB_CURSO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idCursoEndereco = 1,
                            complementoCursoEndereco = "",
                            idCurso = 1,
                            idLogradouro = 2,
                            numeroCursoEndereco = "221"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.EgressoEnderecoModel", b =>
                {
                    b.Property<int>("idEgressoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEgressoEndereco"));

                    b.Property<string>("complementoEgressoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idEgresso")
                        .HasColumnType("int");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("numeroEgressoEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idEgressoEndereco");

                    b.HasIndex("idEgresso")
                        .IsUnique();

                    b.HasIndex("idLogradouro")
                        .IsUnique();

                    b.ToTable("TB_EGRESSO_ENDERECO");

                    b.HasData(
                        new
                        {
                            idEgressoEndereco = 1,
                            complementoEgressoEndereco = "",
                            idEgresso = 1,
                            idLogradouro = 4,
                            numeroEgressoEndereco = "787"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.LogradouroModel", b =>
                {
                    b.Property<int>("idLogradouro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLogradouro"));

                    b.Property<string>("bairroLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cepLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cidadeLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoLogradouro")
                        .HasColumnType("int");

                    b.Property<string>("ufLogradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLogradouro");

                    b.ToTable("TB_LOGRADOURO");

                    b.HasData(
                        new
                        {
                            idLogradouro = 1,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "34"
                        },
                        new
                        {
                            idLogradouro = 2,
                            bairroLogradouro = "Vila Maria",
                            cepLogradouro = "33244232",
                            cidadeLogradouro = "Sao Paulo",
                            tipoLogradouro = 0,
                            ufLogradouro = "44"
                        },
                        new
                        {
                            idLogradouro = 3,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "34"
                        },
                        new
                        {
                            idLogradouro = 4,
                            bairroLogradouro = "Pimentas",
                            cepLogradouro = "332432",
                            cidadeLogradouro = "Guarulhos",
                            tipoLogradouro = 0,
                            ufLogradouro = "364"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.VagaEnderecoModel", b =>
                {
                    b.Property<int>("idVagaEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVagaEndereco"));

                    b.Property<string>("complementoVagaEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idLogradouro")
                        .HasColumnType("int");

                    b.Property<int>("idVaga")
                        .HasColumnType("int");

                    b.Property<string>("numeroVagaEndereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVagaEndereco");

                    b.HasIndex("idLogradouro")
                        .IsUnique();

                    b.HasIndex("idVaga")
                        .IsUnique();

                    b.ToTable("TB_VAGA_ENDERECO");

                    b.HasData(
                        new
                        {
                            idVagaEndereco = 1,
                            complementoVagaEndereco = "",
                            idLogradouro = 3,
                            idVaga = 1,
                            numeroVagaEndereco = "899"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.PublicacaoModel", b =>
                {
                    b.Property<int>("idPublicacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPublicacao"));

                    b.Property<int>("avaliacaoPublicacao")
                        .HasColumnType("int");

                    b.Property<string>("conteudoPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dataCriacaoPublicacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<byte[]>("imagemPublicacao")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("numeroVisualizacoes")
                        .HasColumnType("int");

                    b.Property<string>("títuloPublicacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPublicacao");

                    b.ToTable("TB_PUBLICACAO");

                    b.HasData(
                        new
                        {
                            idPublicacao = 1,
                            avaliacaoPublicacao = 1,
                            conteudoPublicacao = "Conteúdo top",
                            dataCriacaoPublicacao = new DateTime(2024, 11, 3, 0, 37, 27, 737, DateTimeKind.Utc).AddTicks(4095),
                            idCorporacao = 1,
                            títuloPublicacao = "Publicacao"
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.VagaModel", b =>
                {
                    b.Property<int>("idVaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVaga"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("beneficiosVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cidadeVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricaoVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCorporacao")
                        .HasColumnType("int");

                    b.Property<string>("nomeVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("responsabilidadesVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salarioVaga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVaga");

                    b.HasIndex("idCorporacao");

                    b.ToTable("TB_VAGA");

                    b.HasData(
                        new
                        {
                            idVaga = 1,
                            DataCriacao = new DateTime(2024, 11, 3, 0, 37, 27, 737, DateTimeKind.Utc).AddTicks(4134),
                            DataVencimento = new DateTime(2024, 12, 3, 0, 37, 27, 737, DateTimeKind.Utc).AddTicks(4135),
                            beneficiosVaga = "",
                            cidadeVaga = "",
                            descricaoVaga = "Vaga júnior desenvolvedor",
                            idCorporacao = 1,
                            nomeVaga = "Desenvolvedor Júnior",
                            responsabilidadesVaga = "",
                            salarioVaga = ""
                        });
                });

            modelBuilder.Entity("ChronosApi.Models.CandidaturaModel", b =>
                {
                    b.HasOne("ChronosApi.Models.EgressoModel", null)
                        .WithMany()
                        .HasForeignKey("idEgresso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.VagaModel", null)
                        .WithMany()
                        .HasForeignKey("idVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChronosApi.Models.ComentarioModel", b =>
                {
                    b.HasOne("ChronosApi.Models.PublicacaoModel", null)
                        .WithMany("Comentarios")
                        .HasForeignKey("PublicacaoModelidPublicacao");

                    b.HasOne("ChronosApi.Models.EgressoModel", null)
                        .WithMany()
                        .HasForeignKey("idEgresso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.PublicacaoModel", null)
                        .WithMany()
                        .HasForeignKey("idPublicacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChronosApi.Models.Curriculo.CurriculoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.EgressoModel", "Egresso")
                        .WithOne("Curriculo")
                        .HasForeignKey("ChronosApi.Models.Curriculo.CurriculoModel", "idEgresso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Egresso");
                });

            modelBuilder.Entity("ChronosApi.Models.Curriculo.ExperienciaModel", b =>
                {
                    b.HasOne("ChronosApi.Models.Curriculo.CurriculoModel", "Curriculo")
                        .WithMany()
                        .HasForeignKey("CurriculoidCurriculo");

                    b.HasOne("ChronosApi.Models.Curriculo.CurriculoModel", null)
                        .WithMany("ExperienciasProfissionais")
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculo");
                });

            modelBuilder.Entity("ChronosApi.Models.Curriculo.FormacaoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.Curriculo.CurriculoModel", "Curriculo")
                        .WithMany()
                        .HasForeignKey("CurriculoidCurriculo");

                    b.HasOne("ChronosApi.Models.Curriculo.CurriculoModel", null)
                        .WithMany("FormacoesAcademicas")
                        .HasForeignKey("idCurriculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculo");
                });

            modelBuilder.Entity("ChronosApi.Models.CursoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.CorporacaoModel", null)
                        .WithMany("Cursos")
                        .HasForeignKey("idCorporacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.CorporacaoModel", "corporacao")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", "idCorporacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "logradouro")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.CorporacaoEnderecoModel", "idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("corporacao");

                    b.Navigation("logradouro");
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.CursoEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.CursoModel", "curso")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.CursoEnderecoModel", "idCurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "logradouro")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.CursoEnderecoModel", "idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("curso");

                    b.Navigation("logradouro");
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.EgressoEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.EgressoModel", "Egresso")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.EgressoEnderecoModel", "idEgresso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "Logradouro")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.EgressoEnderecoModel", "idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Egresso");

                    b.Navigation("Logradouro");
                });

            modelBuilder.Entity("ChronosApi.Models.Enderecos.VagaEnderecoModel", b =>
                {
                    b.HasOne("ChronosApi.Models.Enderecos.LogradouroModel", "logradouro")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.VagaEnderecoModel", "idLogradouro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronosApi.Models.VagaModel", "vaga")
                        .WithOne()
                        .HasForeignKey("ChronosApi.Models.Enderecos.VagaEnderecoModel", "idVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("logradouro");

                    b.Navigation("vaga");
                });

            modelBuilder.Entity("ChronosApi.Models.VagaModel", b =>
                {
                    b.HasOne("ChronosApi.Models.CorporacaoModel", "Corporacao")
                        .WithMany("Vagas")
                        .HasForeignKey("idCorporacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporacao");
                });

            modelBuilder.Entity("ChronosApi.Models.CorporacaoModel", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("ChronosApi.Models.Curriculo.CurriculoModel", b =>
                {
                    b.Navigation("ExperienciasProfissionais");

                    b.Navigation("FormacoesAcademicas");
                });

            modelBuilder.Entity("ChronosApi.Models.EgressoModel", b =>
                {
                    b.Navigation("Curriculo");
                });

            modelBuilder.Entity("ChronosApi.Models.PublicacaoModel", b =>
                {
                    b.Navigation("Comentarios");
                });
#pragma warning restore 612, 618
        }
    }
}
